name: Deploy New Bot

# Controls when the action will run.
on:
  # Allows running this workflow manually from the Actions tab
  workflow_dispatch:
env:
    REPO_NAME: ${{ github.event.repository.name }}
    TF_WORKING_DIR: ./terraform/test-bots
    VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
    
jobs:
  assign-aws-creds:
    name: Assume Github Action Role
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/test-bots
    permissions:
      id-token: write
      contents: read

    outputs:
      mainIp: ${{ steps.ipAddress.outputs.address }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200
    - run: aws sts get-caller-identity

    - name: set up github auth
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.1.9
          terraform_wrapper: true
    - name: git
      run: git config --global url."https://oauth2:${{ secrets.GH_TOKEN }}@github.com".insteadOf https://github.com
    
    - name: Terraform init
      id: init
      run: terraform init

    - name: Terraform plan
      id: plan
      run: terraform plan -var api_key="${{ secrets.VULTR_API_KEY }}"

    - name: Terraform Output
      id: output
      run: |
         output=$(terraform output -raw main_ip)
         echo "::set-output name=test::$output"
      
    - id: ipAddress
      run: echo "::set-output name=address::${{ steps.output.outputs.stdout }}"


  install-requirements:
    needs: assign-aws-creds
    runs-on: ubuntu-latest
    steps:
    - name: installing requirements for ${{ env.REPO_NAME }} bot
      uses: fifsky/ssh-action@master
      with:
        command: |
          echo '###### Installing Git #######'
          sudo apt-get install git -y

          echo '###### Installing pip ######'
          sudo apt-get install python3-pip -y

          echo '###### Installing Discord Ext Menus ######'
          pip install -U git+https://github.com/Rapptz/discord-ext-menus

          echo '###### Installing Ap Scheduler ######'
          pip install apscheduler

          echo '###### Installing Discord.py ######'
          pip install discord.py

        host: ${{needs.assign-aws-creds.outputs.mainIp}}
        user: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-via-sftp:
    needs: install-requirements
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v2
      - name: SFTP Deploy
        uses: wlixcc/SFTP-Deploy-Action@v1.2.1
        with:
          username: root
          server:  ${{needs.assign-aws-creds.outputs.mainIp}}
          port: 22 # default is 22
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

          # will put all file under this path
          local_path: ./* # default is ./*
          # files will copy to under remote_path
          remote_path: /root/${{ env.REPO_NAME }}/

          # sftp args
          args: '-o ConnectTimeout=5'

  add-bot-token:
      needs: deploy-via-sftp
      runs-on: ubuntu-latest
      timeout-minutes: 2
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      steps:
      - name: executing remote ssh commands using ssh key
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd baby-yoda/lib/bot
            touch token.0
            export ${{ env.BOT_TOKEN }}
            echo ${{ env.BOT_TOKEN }} > token.0
            echo $?
          host:  ${{needs.assign-aws-creds.outputs.mainIp}}
          user: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
  
  create-systemctl-service:
#    env:
#      REPO_NAME = ${{ env.REPO_NAME }}
    needs: add-bot-token
    runs-on: ubuntu-latest
    steps:
    - name: creating systemctl service
      uses: fifsky/ssh-action@master
      with:
        command: |
          export ${{ env.REPO_NAME }}
          echo "[Unit]
          Description=${{ env.REPO_NAME }} Discord Bot
          After=multi-user.target

          [Service]
          Type=simple
          ExecStart=/root/${{ env.REPO_NAME }}/launcher.py
          User=root
          WorkingDirectory=/root/${{ env.REPO_NAME }}/
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target" >> /etc/systemd/system/${{ env.REPO_NAME }}.service

          chmod +x /root/${{ env.REPO_NAME }}/launcher.py
          sudo systemctl enable ${{ env.REPO_NAME }}.service
          sudo systemctl daemon-reload
          sudo systemctl start ${{ env.REPO_NAME }}.service
              
        host: ${{needs.assign-aws-creds.outputs.mainIp}}
        user: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}

  create-systemctl-restart:
      needs: create-systemctl-service
      runs-on: ubuntu-latest
#      env:
#        REPO_NAME = ${{ env.REPO_NAME }}
      steps:
      - name: creating systemctl restart service
        uses: fifsky/ssh-action@master
        with:
          command: |
            export ${{ env.REPO_NAME }}
            echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot restart
            After=multi-user.target
            StartLimitInterval=10
            StartLimitBurst=5

            [Service]
            Type=oneshot
            ExecStart=/usr/bin/systemctl restart ${{ env.REPO_NAME }}.service

            [Install]
            WantedBy=multi-user.target" >> /etc/systemd/system/${{ env.REPO_NAME }}-watcher.service

            sudo systemctl enable ${{ env.REPO_NAME }}-watcher.service
            sudo systemctl start ${{ env.REPO_NAME }}-watcher.service

          host: ${{needs.assign-aws-creds.outputs.mainIp}}
          user: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}

  create-systemctl-watcher:
        needs: create-systemctl-restart
        runs-on: ubuntu-latest
  #      env:
  #          REPO_NAME = ${{ env.REPO_NAME }}
        steps:
        - name: creating systemctl watcher service
          uses: fifsky/ssh-action@master
          with:
            command: |
              echo "[Path]
              Unit=${{ env.REPO_NAME }}-watcher.service
              PathChanged=/root/${{ env.REPO_NAME }}

              [Install]
              WantedBy=multi-user.target" >> /etc/systemd/system/${{ env.REPO_NAME }}-watcher.path

              sudo systemctl enable ${{ env.REPO_NAME }}-watcher.path
              sudo systemctl start ${{ env.REPO_NAME }}-watcher.path

            host: ${{needs.assign-aws-creds.outputs.mainIp}}
            user: root
            key: ${{ secrets.SSH_PRIVATE_KEY }}
